import{g as a,n as e,d as t}from"./server.mjs";import{u as o}from"./cookie-D3WPRoGl.mjs";const useApi=()=>{const r=a().public.apiBaseUrl,apiFetch=async(a,s={})=>{try{const t=o("auth-token");return await $fetch(`${r}${a}`,{...s,headers:{Accept:"application/json","Content-Type":"application/json",...t.value&&{Authorization:`Bearer ${t.value}`},...s.headers},onResponseError({response:a}){if(401===a.status){o("auth-token").value=null,e("/auth/login")}}})}catch(e){throw console.error(`API Error at ${a}:`,e),t({statusCode:e?.statusCode||500,statusMessage:e?.data?.message||"An error occurred",data:e?.data})}};return{apiFetch:apiFetch,getWorkspaces:async(a={})=>{const e=new URLSearchParams;Object.entries(a).forEach(([a,t])=>{null!=t&&""!==t&&e.append(a,t.toString())});const t=e.toString()?`?${e.toString()}`:"";return await apiFetch(`/api/workspaces${t}`)},getWorkspace:async a=>await apiFetch(`/api/workspaces/${a}`),getWorkspaceCities:async()=>{try{const a=await apiFetch("/api/workspaces?per_page=1000");return[...new Set(a.data.map(a=>a.city))].sort()}catch(a){return console.error("Error fetching cities:",a),[]}},getWorkspaceTypes:()=>[{value:"desk",label:"Hot Desk"},{value:"meeting_room",label:"Meeting Room"},{value:"private_office",label:"Private Office"},{value:"coworking_space",label:"Coworking Space"}],login:async a=>await apiFetch("/api/auth/login",{method:"POST",body:JSON.stringify(a)}),register:async a=>await apiFetch("/api/auth/register",{method:"POST",body:JSON.stringify(a)}),logout:async()=>await apiFetch("/api/auth/logout",{method:"POST"}),getUser:async()=>await apiFetch("/api/user"),updateProfile:async a=>await apiFetch("/api/user/profile",{method:"PUT",body:JSON.stringify(a)}),forgotPassword:async a=>await apiFetch("/api/auth/forgot-password",{method:"POST",body:JSON.stringify({email:a})}),resetPassword:async a=>await apiFetch("/api/auth/reset-password",{method:"POST",body:JSON.stringify(a)})}};export{useApi as u};
//# sourceMappingURL=useApi-BJ4m0sc6.mjs.map
